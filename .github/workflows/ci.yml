name: CI Pipeline

# When to run this workflow
on:
  push:
    branches: [main, develop] # Run on push to these branches
  pull_request:
    branches: [main] # Run on PRs to main

# Jobs to run
jobs:
  # Job 1: Test Backend
  test-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Build backend
        run: |
          cd server
          npm run build

      - name: Check backend build output
        run: |
          cd server
          ls -la dist/
          echo "Backend build successful!"

  # Job 2: Test Frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      - name: Build frontend
        run: |
          cd client
          npm run build

      - name: Check frontend build output
        run: |
          cd client
          ls -la dist/
          echo "Frontend build successful!"

  # Job 3: Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend] # Run after tests pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        run: |
          cd server
          docker build -t chatbot-backend .

      - name: Build frontend Docker image
        run: |
          cd client
          docker build -t chatbot-frontend .

      - name: Test Docker Compose
        run: |
          docker-compose config
          echo "Docker Compose configuration is valid!"
